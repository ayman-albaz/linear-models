import 
  unittest,
  arraymancer,
  ../../src/linear_models

proc `~=`(x, y: SomeFloat): bool =
  result = x.round(12) == y.round(12)


proc checkStatsTablesEqual(table1, table2: StatsTable)  =
  for i in 0..<len(table1.statsRows):
    check table1.statsRows[i].coefficient ~= table2.statsRows[i].coefficient
    check table1.statsRows[i].standardError ~= table2.statsRows[i].standardError
    check table1.statsRows[i].zScore ~= table2.statsRows[i].zScore
    check table1.statsRows[i].pValue ~= table2.statsRows[i].pValue
    check table1.statsRows[i].confidenceIntervalLower ~= table2.statsRows[i].confidenceIntervalLower
    check table1.statsRows[i].confidenceIntervalUpper ~= table2.statsRows[i].confidenceIntervalUpper


suite "glm binomial":

  let 
    X = [[0.95601119,  0.87647851],
         [-2.20004465, -0.62625987],
         [-1.27545515,  1.32644564],
         [-1.44131698,  0.39791802],
         [-2.1776243 , -0.37052885],
         [-0.29938274,  1.29160856],
         [-2.52902482, -0.40531331],
         [-0.45909187,  1.00496831],
         [-2.77913571,  1.74098504],
         [-0.86087541,  2.6546214 ],
         [-2.85495442,  0.43957948],
         [ 0.33060411,  0.23314301],
         [-0.78649263,  1.38671912],
         [ 1.50937094,  1.60980518],
         [-1.33694492,  0.70169188],
         [-0.83872788,  0.48769148],
         [ 0.74420393,  2.02984694],
         [-3.06478938, -0.06202728],
         [-2.87870982,  0.04025169],
         [-1.62747583, -0.56072547],
         [-1.59520684,  1.13810175],
         [-3.08516844,  0.05427506],
         [-1.29941812, -0.87410963],
         [ 0.26171059,  1.47697848],
         [-1.45714192,  1.29434554],
         [-0.26439769,  1.71595103],
         [-1.17049404,  2.11535697],
         [ 0.91791284,  2.71661137],
         [-1.53761993,  0.62843533],
         [-2.65014618, -1.44730846],
         [-1.56476328,  0.81918191],
         [-2.81578503, -1.27870142],
         [-1.45876424,  1.11597346],
         [-0.21387128,  0.25370824],
         [-4.99212577,  0.19490133],
         [-1.54909011, -0.23546224],
         [-0.69380234,  1.01562854],
         [-1.28878921,  1.74913842],
         [-2.05021398,  0.76327048],
         [-2.39183167, -0.75023224],
         [-1.30988121, -1.51351793],
         [-2.25270943,  0.27370137],
         [-2.87128404, -1.64099356],
         [-0.98067799,  3.71074226],
         [-0.3407503 , -1.20435789],
         [-0.59744498, -0.13272468],
         [-1.36752111,  0.76721263],
         [-1.96268592,  2.34540995],
         [-3.57676379,  1.38683545],
         [-1.77641617,  1.50467832],
         [ 0.215677  ,  0.53922814],
         [-0.66829936,  1.14544014],
         [-2.41647837,  1.23800804],
         [ 0.15931275,  2.2973424 ],
         [-1.2062107 , -0.20427443],
         [-1.05283921,  2.57108946],
         [-1.03879134, -0.11333456],
         [-0.73475112,  3.52357956],
         [-1.28041652,  1.72967294],
         [-0.91034671, -0.63844241],
         [-0.81659965, -0.36907924],
         [ 0.20659206,  0.5271498 ],
         [-1.54810728,  1.97998068],
         [-0.15066744,  0.43182918],
         [ 0.47845674,  3.00336566],
         [-1.5033572 ,  3.44502005],
         [-2.40877962,  0.55638486],
         [-0.1364175 , -0.02089741],
         [ 0.17537107,  1.80172334],
         [-1.17768076,  0.81398401],
         [-1.5823024 ,  0.40249987],
         [-3.96728985, -1.7190396 ],
         [ 0.72939857,  1.30052792],
         [-1.0854058 ,  1.12627415],
         [-0.76738973,  1.36570271],
         [-0.08773115,  1.15113703],
         [-1.60699017,  0.75289458],
         [-3.22022979,  1.73289399],
         [-2.02651646,  3.56396295],
         [-2.95886433,  0.90695454],
         [-1.39607779,  0.21296273],
         [-1.07351019,  3.20275707],
         [-0.09467277,  3.19786512],
         [ 0.28256022,  1.72189494],
         [-1.78336334,  1.7681966 ],
         [-1.74834438,  0.55681593],
         [-2.42389232,  0.32808668],
         [-0.76422969, -0.36067659],
         [-1.59842015,  2.77234851],
         [-0.9999792 ,  1.87145477],
         [-3.49935558,  1.0646829 ],
         [-2.45950787,  0.75383342],
         [-2.8352067 ,  0.52385909],
         [-1.04217656,  1.80632384],
         [-2.50423153,  0.70276239],
         [-0.11312678,  0.63174585],
         [-1.91121178,  1.08954837],
         [-1.80948862, -0.60018057],
         [-0.16627286, -0.44594213],
         [-1.06159023,  0.924985  ]].toTensor().astype(float)
    y = [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1,
         1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0,
         1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
         1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0,
         0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0].toTensor().astype(float)

  test "y ~ x1 + x2":
    let 
      result = StatsTable(statsRows: @[StatsRow(coefficient: -1.155191503572359,
                                                standardError: 0.2484710233981694,
                                                zScore: -4.649200086889768,
                                                pValue: 3.332248353693501e-06,
                                                confidenceIntervalLower: -1.64218576063458,
                                                confidenceIntervalUpper: -0.6681972465101377),
                                        StatsRow(coefficient: -1.364318837862886,
                                                 standardError: 0.2973622846504945,
                                                 zScore: -4.588069530964365,
                                                 pValue: 4.473636496360456e-06,
                                                 confidenceIntervalLower: -1.947138206138403,
                                                 confidenceIntervalUpper: -0.7814994695873694)])
      output = glm(X, y, Binomial()).statsSummary.statsTable
    checkStatsTablesEqual(output, result)


  test "y ~ 1 + x1 + x2":
    let 
      result = StatsTable(statsRows: @[StatsRow(coefficient: -1.310883442644075,
                                                standardError: 0.5919047107286295,
                                                zScore: -2.214686619118791,
                                                pValue: 0.02678158193543378,
                                                confidenceIntervalLower: -2.470995357951787,
                                                confidenceIntervalUpper: -0.1507715273363619),
                                       StatsRow(coefficient: -1.751475050854602,
                                                standardError: 0.4086346075149254,
                                                zScore: -4.286164261774204,
                                                pValue: 1.817845948770547e-05,
                                                confidenceIntervalLower: -2.552384164420516,
                                                confidenceIntervalUpper: -0.9505659372886877),
                                       StatsRow(coefficient: -1.090476899817407,
                                                standardError: 0.3081901003965322,
                                                zScore: -3.538325528348726,
                                                pValue: 0.0004026732940638489,
                                                confidenceIntervalLower: -1.694518396986394,
                                                confidenceIntervalUpper: -0.4864354026484202)])
      output = glm(addConstant(X), y, Binomial()).statsSummary.statsTable
    checkStatsTablesEqual(output, result)


suite "glm gaussian":

  let
    X = [[0.95601119,  0.87647851],
             [-2.20004465, -0.62625987],
             [-1.27545515,  1.32644564],
             [-1.44131698,  0.39791802],
             [-2.1776243 , -0.37052885],
             [-0.29938274,  1.29160856],
             [-2.52902482, -0.40531331],
             [-0.45909187,  1.00496831],
             [-2.77913571,  1.74098504],
             [-0.86087541,  2.6546214 ],
             [-2.85495442,  0.43957948],
             [ 0.33060411,  0.23314301],
             [-0.78649263,  1.38671912],
             [ 1.50937094,  1.60980518],
             [-1.33694492,  0.70169188],
             [-0.83872788,  0.48769148],
             [ 0.74420393,  2.02984694],
             [-3.06478938, -0.06202728],
             [-2.87870982,  0.04025169],
             [-1.62747583, -0.56072547],
             [-1.59520684,  1.13810175],
             [-3.08516844,  0.05427506],
             [-1.29941812, -0.87410963],
             [ 0.26171059,  1.47697848],
             [-1.45714192,  1.29434554],
             [-0.26439769,  1.71595103],
             [-1.17049404,  2.11535697],
             [ 0.91791284,  2.71661137],
             [-1.53761993,  0.62843533],
             [-2.65014618, -1.44730846],
             [-1.56476328,  0.81918191],
             [-2.81578503, -1.27870142],
             [-1.45876424,  1.11597346],
             [-0.21387128,  0.25370824],
             [-4.99212577,  0.19490133],
             [-1.54909011, -0.23546224],
             [-0.69380234,  1.01562854],
             [-1.28878921,  1.74913842],
             [-2.05021398,  0.76327048],
             [-2.39183167, -0.75023224],
             [-1.30988121, -1.51351793],
             [-2.25270943,  0.27370137],
             [-2.87128404, -1.64099356],
             [-0.98067799,  3.71074226],
             [-0.3407503 , -1.20435789],
             [-0.59744498, -0.13272468],
             [-1.36752111,  0.76721263],
             [-1.96268592,  2.34540995],
             [-3.57676379,  1.38683545],
             [-1.77641617,  1.50467832],
             [ 0.215677  ,  0.53922814],
             [-0.66829936,  1.14544014],
             [-2.41647837,  1.23800804],
             [ 0.15931275,  2.2973424 ],
             [-1.2062107 , -0.20427443],
             [-1.05283921,  2.57108946],
             [-1.03879134, -0.11333456],
             [-0.73475112,  3.52357956],
             [-1.28041652,  1.72967294],
             [-0.91034671, -0.63844241],
             [-0.81659965, -0.36907924],
             [ 0.20659206,  0.5271498 ],
             [-1.54810728,  1.97998068],
             [-0.15066744,  0.43182918],
             [ 0.47845674,  3.00336566],
             [-1.5033572 ,  3.44502005],
             [-2.40877962,  0.55638486],
             [-0.1364175 , -0.02089741],
             [ 0.17537107,  1.80172334],
             [-1.17768076,  0.81398401],
             [-1.5823024 ,  0.40249987],
             [-3.96728985, -1.7190396 ],
             [ 0.72939857,  1.30052792],
             [-1.0854058 ,  1.12627415],
             [-0.76738973,  1.36570271],
             [-0.08773115,  1.15113703],
             [-1.60699017,  0.75289458],
             [-3.22022979,  1.73289399],
             [-2.02651646,  3.56396295],
             [-2.95886433,  0.90695454],
             [-1.39607779,  0.21296273],
             [-1.07351019,  3.20275707],
             [-0.09467277,  3.19786512],
             [ 0.28256022,  1.72189494],
             [-1.78336334,  1.7681966 ],
             [-1.74834438,  0.55681593],
             [-2.42389232,  0.32808668],
             [-0.76422969, -0.36067659],
             [-1.59842015,  2.77234851],
             [-0.9999792 ,  1.87145477],
             [-3.49935558,  1.0646829 ],
             [-2.45950787,  0.75383342],
             [-2.8352067 ,  0.52385909],
             [-1.04217656,  1.80632384],
             [-2.50423153,  0.70276239],
             [-0.11312678,  0.63174585],
             [-1.91121178,  1.08954837],
             [-1.80948862, -0.60018057],
             [-0.16627286, -0.44594213],
             [-1.06159023,  0.924985  ]].toTensor().astype(float)
    y = [0.5       , 0.73105858, 0.5       , 0.73105858, 0.73105858,
           0.5       , 0.73105858, 0.5       , 0.73105858, 0.5       ,
           0.73105858, 0.5       , 0.5       , 0.5       , 0.5       ,
           0.73105858, 0.5       , 0.73105858, 0.73105858, 0.73105858,
           0.5       , 0.73105858, 0.73105858, 0.5       , 0.5       ,
           0.5       , 0.5       , 0.5       , 0.73105858, 0.73105858,
           0.73105858, 0.73105858, 0.5       , 0.5       , 0.73105858,
           0.73105858, 0.5       , 0.5       , 0.73105858, 0.73105858,
           0.73105858, 0.5       , 0.73105858, 0.5       , 0.73105858,
           0.73105858, 0.5       , 0.73105858, 0.73105858, 0.73105858,
           0.5       , 0.73105858, 0.73105858, 0.5       , 0.73105858,
           0.73105858, 0.5       , 0.5       , 0.5       , 0.73105858,
           0.73105858, 0.5       , 0.5       , 0.5       , 0.5       ,
           0.5       , 0.73105858, 0.73105858, 0.5       , 0.5       ,
           0.5       , 0.73105858, 0.5       , 0.5       , 0.73105858,
           0.5       , 0.73105858, 0.73105858, 0.5       , 0.73105858,
           0.5       , 0.5       , 0.5       , 0.73105858, 0.73105858,
           0.73105858, 0.73105858, 0.5       , 0.5       , 0.5       ,
           0.73105858, 0.73105858, 0.73105858, 0.5       , 0.73105858,
           0.5       , 0.73105858, 0.73105858, 0.5       , 0.5       ].toTensor().astype(float)


  test "y ~ x1 + x2":
    let
      result = StatsTable(statsRows: @[StatsRow(coefficient: -0.2552327006716806,
                                                standardError: 0.01885835404359205,
                                                zScore: -13.53419816393823,
                                                pValue: 0.0,
                                                confidenceIntervalLower: -0.2921943954048263,
                                                confidenceIntervalUpper: -0.2182710059385349),
                                       StatsRow(coefficient: 0.1284063941795917,
                                                standardError: 0.0224263597667823,
                                                zScore: 5.72569046046367,
                                                pValue: 1.030138996327423e-08,
                                                confidenceIntervalLower: 0.08445153673236028,
                                                confidenceIntervalUpper: 0.1723612516268231)])
      output = glm(X, y, Gaussian()).statsSummary.statsTable
    checkStatsTablesEqual(output, result)
   

  test "y ~ 1 + x1 + x2":
    let
      result = StatsTable(statsRows: @[StatsRow(coefficient: 0.5799399651351428,
                                                standardError: 0.01631343158800425,
                                                zScore: 35.54984504680117,
                                                pValue: 0.0,
                                                confidenceIntervalLower: 0.5479662267583963,
                                                confidenceIntervalUpper: 0.6119137035118892),
                                       StatsRow(coefficient: -0.04853576597392952,
                                                standardError: 0.007708295985044047,
                                                zScore: -6.296562310022943,
                                                pValue: 3.043190144325081e-10,
                                                confidenceIntervalLower: -0.06364374848679055,
                                                confidenceIntervalUpper: -0.03342778346106849),
                                       StatsRow(coefficient: -0.03275043402667815,
                                                standardError: 0.007534638876536847,
                                                zScore: -4.346649463010662,
                                                pValue: 1.382328682320022e-05,
                                                confidenceIntervalLower: -0.0475180548612057,
                                                confidenceIntervalUpper: -0.01798281319215059)])
      output = glm(addConstant(X), y, Gaussian()).statsSummary.statsTable
    checkStatsTablesEqual(output, result)


suite "glm poisson":

  let
    X = [[ 5,  1],
         [ 7,  0],
         [10, 12],
         [17, 11],
         [14,  1],
         [12, 13],
         [ 9,  1],
         [16,  2],
         [ 0,  0],
         [12,  2],
         [ 9,  3],
         [12,  9],
         [ 1,  5],
         [14, 14],
         [11, 11],
         [11,  8],
         [17, 12],
         [ 3, 15],
         [ 2,  1],
         [17,  4],
         [13,  7],
         [ 9,  2],
         [ 0, 15],
         [ 0, 14],
         [16,  9],
         [11,  8],
         [16,  4],
         [ 5,  6],
         [17, 11],
         [ 6, 11],
         [10,  3],
         [ 2,  5],
         [ 9, 16],
         [19, 17],
         [17, 10],
         [ 9,  1],
         [14, 16],
         [13, 10],
         [14,  1],
         [ 3,  3],
         [ 9, 19],
         [13,  7],
         [ 5,  5],
         [18, 12],
         [13, 12],
         [ 0, 17],
         [13, 11],
         [18,  3],
         [ 9,  7],
         [ 0, 17],
         [16, 10],
         [10,  9],
         [10, 17],
         [14,  5],
         [ 6,  0],
         [12, 19],
         [12, 19],
         [13, 12],
         [ 7, 10],
         [ 5, 15],
         [17, 19],
         [13,  2],
         [ 4, 10],
         [ 3,  3],
         [ 7,  6],
         [19, 17],
         [ 5,  8],
         [19,  0],
         [11, 19],
         [15,  0],
         [ 7,  9],
         [14,  0],
         [18,  9],
         [14,  1],
         [12, 18],
         [ 7, 12],
         [ 9,  0],
         [12, 16],
         [ 5, 19],
         [ 6,  1],
         [13, 12],
         [16, 19],
         [ 5,  8],
         [ 7,  6],
         [11, 14],
         [ 5, 17],
         [19, 16],
         [ 5,  4],
         [13,  6],
         [ 6,  2],
         [17,  9],
         [14, 18],
         [ 4, 11],
         [10,  8],
         [19, 19],
         [ 6,  1],
         [10, 14],
         [17, 12],
         [19, 15],
         [14,  4]].toTensor().astype(float)

    y = [10.22236737,  8.69196273, 11.31712358, 16.4441131 ,  5.31832312,
         16.78356591,  7.25361523,  8.60762003,  5.92758717, 10.86665564,
         12.30981023, 12.66292085, 10.83892809, 17.79193731, 17.65842516,
         14.31240337, 21.73714092, 18.48496331,  3.34035412, 12.35621177,
         13.76246092,  8.59425101, 17.56541826, 11.84403462, 15.8749432 ,
         10.43532582, 13.35544818,  6.96049869, 15.32710702, 13.60104039,
         10.3584037 ,  8.05571921, 16.21221039, 25.79853395, 16.48555799,
          3.3436104 , 20.1776866 , 11.46071335,  8.54760759,  6.59089886,
         21.35482645, 17.32893598, 10.40451424, 18.1245454 , 18.47172722,
         16.00246202, 16.43372506,  8.94214258, 12.35404823, 19.03538161,
         16.14943591, 15.74341488, 22.35368923, 12.77068177,  6.58469104,
         20.86329636, 18.29642967, 17.45022673, 13.40377681, 14.92071537,
         25.0103337 ,  8.91310599, 14.53607964,  6.72452005, 11.37980176,
         19.7842156 , 13.24800291,  8.74338217, 19.03586289,  7.55718437,
         14.72161591,  9.81063874, 18.16737833, 12.84654443, 22.67078197,
         16.88595327,  4.51789107, 20.5385791 , 23.10836505,  8.77422853,
         17.03492985, 23.10380475, 12.82601021,  9.90754513, 22.89860446,
         18.40774841, 21.79368125,  9.76191186, 11.45581923,  6.31417961,
         15.08499296, 18.74772084, 13.56295032, 17.25854193, 25.56965567,
          8.98872892, 19.30044029, 16.94939787, 22.6241843 , 13.7427704 ].toTensor().astype(float)

  test "y ~ x1 + x2":
    let
      result = StatsTable(statsRows: @[StatsRow(coefficient: 0.09873825800368877,
                                                standardError: 0.00458912132760148,
                                                zScore: 21.51572184632012,
                                                pValue: 0.0,
                                                confidenceIntervalLower: 0.08974374548090523,
                                                confidenceIntervalUpper: 0.1077327705264723),
                                       StatsRow(coefficient: 0.1131313403368572,
                                                standardError: 0.004600697086275121,
                                                zScore: 24.59004325113092,
                                                pValue: 0.0,
                                                confidenceIntervalLower: 0.1041141397439796,
                                                confidenceIntervalUpper: 0.1221485409297348)])
      output = glm(X, y, Poisson()).statsSummary.statsTable
    checkStatsTablesEqual(result, output)

  test "y ~ 1+ x1 + x2":
    let
      result = StatsTable(statsRows: @[StatsRow(coefficient: 1.932462793780953,
                                                standardError: 0.0748725897524939,
                                                zScore: 25.81001672533419,
                                                pValue: 0.0,
                                                confidenceIntervalLower: 1.785715214436822,
                                                confidenceIntervalUpper: 2.079210373125083),
                                       StatsRow(coefficient: 0.01784198747887433,
                                                standardError: 0.005041030108996043,
                                                zScore: 3.539353483930626,
                                                pValue: 0.0004011083597259546,
                                                confidenceIntervalLower: 0.007961750020260061,
                                                confidenceIntervalUpper: 0.0277222249374886), 
                                       StatsRow(coefficient: 0.05284510695328623,
                                                standardError: 0.004498313302577935,
                                                zScore: 11.74776041566541,
                                                pValue: 0.0, confidenceIntervalLower: 0.04402857488905605,
                                                confidenceIntervalUpper: 0.06166163901751641)])
      output = glm(addConstant(X), y, Poisson()).statsSummary.statsTable
    checkStatsTablesEqual(result, output)


suite "glm gamma":

  # TODO: Gamma doesn't work yet!

  let
    X1 = [[7.12000e+02, 2.10000e+01, 1.05000e+02, 8.24000e+01, 1.35660e+04,
           1.23000e+01, 1.49520e+04],
          [6.43000e+02, 2.65000e+01, 9.70000e+01, 8.02000e+01, 1.35660e+04,
           1.53000e+01, 1.70395e+04],
          [6.79000e+02, 2.83000e+01, 1.13000e+02, 8.63000e+01, 9.61100e+03,
           1.39000e+01, 1.92157e+04],
          [8.01000e+02, 2.71000e+01, 1.09000e+02, 8.04000e+01, 9.48300e+03,
           1.36000e+01, 2.17071e+04],
          [7.53000e+02, 2.20000e+01, 1.15000e+02, 6.47000e+01, 9.26500e+03,
           1.46000e+01, 1.65660e+04],
          [7.14000e+02, 2.43000e+01, 1.07000e+02, 7.90000e+01, 9.55500e+03,
           1.38000e+01, 1.73502e+04],
          [9.20000e+02, 2.12000e+01, 1.18000e+02, 7.22000e+01, 9.61100e+03,
           1.33000e+01, 1.95040e+04],
          [7.79000e+02, 2.05000e+01, 1.14000e+02, 7.52000e+01, 9.48300e+03,
           1.45000e+01, 1.59695e+04],
          [7.71000e+02, 2.32000e+01, 1.02000e+02, 8.11000e+01, 9.48300e+03,
           1.42000e+01, 1.78872e+04],
          [7.24000e+02, 2.05000e+01, 1.12000e+02, 8.03000e+01, 1.26560e+04,
           1.37000e+01, 1.48420e+04],
          [6.82000e+02, 2.38000e+01, 9.60000e+01, 8.30000e+01, 9.48300e+03,
           1.46000e+01, 1.62316e+04],
          [8.37000e+02, 2.21000e+01, 1.11000e+02, 7.45000e+01, 1.26560e+04,
           1.16000e+01, 1.84977e+04],
          [5.99000e+02, 1.99000e+01, 1.17000e+02, 8.38000e+01, 8.29800e+03,
           1.51000e+01, 1.19201e+04],
          [6.80000e+02, 2.15000e+01, 1.21000e+02, 7.76000e+01, 9.26500e+03,
           1.37000e+01, 1.46200e+04],
          [7.47000e+02, 2.25000e+01, 1.09000e+02, 7.79000e+01, 8.31400e+03,
           1.44000e+01, 1.68075e+04],
          [9.82000e+02, 1.94000e+01, 1.37000e+02, 6.53000e+01, 9.48300e+03,
           1.33000e+01, 1.90508e+04],
          [7.19000e+02, 2.59000e+01, 1.09000e+02, 8.09000e+01, 8.29800e+03,
           1.49000e+01, 1.86221e+04],
          [8.31000e+02, 1.85000e+01, 1.38000e+02, 8.02000e+01, 9.48300e+03,
           1.46000e+01, 1.53735e+04],
          [8.58000e+02, 1.94000e+01, 1.19000e+02, 8.48000e+01, 1.26560e+04,
           1.43000e+01, 1.66452e+04],
          [6.52000e+02, 2.72000e+01, 1.08000e+02, 8.64000e+01, 1.35660e+04,
           1.46000e+01, 1.77344e+04],
          [7.18000e+02, 2.37000e+01, 1.15000e+02, 7.35000e+01, 9.48300e+03,
           1.50000e+01, 1.70166e+04],
          [7.87000e+02, 2.08000e+01, 1.26000e+02, 7.47000e+01, 9.48300e+03,
           1.49000e+01, 1.63696e+04],
          [5.15000e+02, 2.68000e+01, 1.06000e+02, 8.78000e+01, 8.29800e+03,
           1.53000e+01, 1.38020e+04],
          [7.32000e+02, 2.30000e+01, 1.03000e+02, 8.66000e+01, 9.61100e+03,
           1.38000e+01, 1.68360e+04],
          [7.83000e+02, 2.05000e+01, 1.25000e+02, 7.85000e+01, 9.48300e+03,
           1.41000e+01, 1.60515e+04],
          [6.12000e+02, 2.37000e+01, 1.00000e+02, 8.06000e+01, 9.03300e+03,
           1.33000e+01, 1.45044e+04],
          [4.86000e+02, 2.32000e+01, 1.17000e+02, 8.48000e+01, 8.29800e+03,
           1.59000e+01, 1.12752e+04],
          [7.65000e+02, 2.36000e+01, 1.05000e+02, 7.92000e+01, 9.48300e+03,
           1.37000e+01, 1.80540e+04],
          [7.93000e+02, 2.17000e+01, 1.25000e+02, 7.84000e+01, 9.48300e+03,
           1.45000e+01, 1.72081e+04],
          [7.76000e+02, 2.30000e+01, 1.10000e+02, 7.72000e+01, 9.26500e+03,
           1.36000e+01, 1.78480e+04],
          [9.78000e+02, 1.93000e+01, 1.30000e+02, 7.15000e+01, 9.48300e+03,
           1.53000e+01, 1.88754e+04],
          [7.92000e+02, 2.12000e+01, 1.26000e+02, 8.22000e+01, 1.26560e+04,
           1.51000e+01, 1.67904e+04]].toTensor().astype(float)
    y1 = [60.3, 52.3, 53.4, 57.0, 68.7, 48.8, 65.5, 70.5, 59.1, 62.7, 51.6,
          62.0, 68.4, 69.2, 64.7, 75.0, 62.1, 67.2, 67.7, 52.7, 65.7, 72.2,
          47.4, 51.3, 63.6, 50.7, 51.6, 56.2, 67.6, 58.9, 74.7, 67.3].toTensor().astype(float)
    X2 = [[ 5,  1],
         [ 7,  0],
         [10, 12],
         [17, 11],
         [14,  1],
         [12, 13],
         [ 9,  1],
         [16,  2],
         [ 0,  0],
         [12,  2],
         [ 9,  3],
         [12,  9],
         [ 1,  5],
         [14, 14],
         [11, 11],
         [11,  8],
         [17, 12],
         [ 3, 15],
         [ 2,  1],
         [17,  4],
         [13,  7],
         [ 9,  2],
         [ 0, 15],
         [ 0, 14],
         [16,  9],
         [11,  8],
         [16,  4],
         [ 5,  6],
         [17, 11],
         [ 6, 11],
         [10,  3],
         [ 2,  5],
         [ 9, 16],
         [19, 17],
         [17, 10],
         [ 9,  1],
         [14, 16],
         [13, 10],
         [14,  1],
         [ 3,  3],
         [ 9, 19],
         [13,  7],
         [ 5,  5],
         [18, 12],
         [13, 12],
         [ 0, 17],
         [13, 11],
         [18,  3],
         [ 9,  7],
         [ 0, 17],
         [16, 10],
         [10,  9],
         [10, 17],
         [14,  5],
         [ 6,  0],
         [12, 19],
         [12, 19],
         [13, 12],
         [ 7, 10],
         [ 5, 15],
         [17, 19],
         [13,  2],
         [ 4, 10],
         [ 3,  3],
         [ 7,  6],
         [19, 17],
         [ 5,  8],
         [19,  0],
         [11, 19],
         [15,  0],
         [ 7,  9],
         [14,  0],
         [18,  9],
         [14,  1],
         [12, 18],
         [ 7, 12],
         [ 9,  0],
         [12, 16],
         [ 5, 19],
         [ 6,  1],
         [13, 12],
         [16, 19],
         [ 5,  8],
         [ 7,  6],
         [11, 14],
         [ 5, 17],
         [19, 16],
         [ 5,  4],
         [13,  6],
         [ 6,  2],
         [17,  9],
         [14, 18],
         [ 4, 11],
         [10,  8],
         [19, 19],
         [ 6,  1],
         [10, 14],
         [17, 12],
         [19, 15],
         [14,  4]].toTensor().astype(float)

    y2 = [10.22236737,  8.69196273, 11.31712358, 16.4441131 ,  5.31832312,
         16.78356591,  7.25361523,  8.60762003,  5.92758717, 10.86665564,
         12.30981023, 12.66292085, 10.83892809, 17.79193731, 17.65842516,
         14.31240337, 21.73714092, 18.48496331,  3.34035412, 12.35621177,
         13.76246092,  8.59425101, 17.56541826, 11.84403462, 15.8749432 ,
         10.43532582, 13.35544818,  6.96049869, 15.32710702, 13.60104039,
         10.3584037 ,  8.05571921, 16.21221039, 25.79853395, 16.48555799,
          3.3436104 , 20.1776866 , 11.46071335,  8.54760759,  6.59089886,
         21.35482645, 17.32893598, 10.40451424, 18.1245454 , 18.47172722,
         16.00246202, 16.43372506,  8.94214258, 12.35404823, 19.03538161,
         16.14943591, 15.74341488, 22.35368923, 12.77068177,  6.58469104,
         20.86329636, 18.29642967, 17.45022673, 13.40377681, 14.92071537,
         25.0103337 ,  8.91310599, 14.53607964,  6.72452005, 11.37980176,
         19.7842156 , 13.24800291,  8.74338217, 19.03586289,  7.55718437,
         14.72161591,  9.81063874, 18.16737833, 12.84654443, 22.67078197,
         16.88595327,  4.51789107, 20.5385791 , 23.10836505,  8.77422853,
         17.03492985, 23.10380475, 12.82601021,  9.90754513, 22.89860446,
         18.40774841, 21.79368125,  9.76191186, 11.45581923,  6.31417961,
         15.08499296, 18.74772084, 13.56295032, 17.25854193, 25.56965567,
          8.98872892, 19.30044029, 16.94939787, 22.6241843 , 13.7427704 ].toTensor().astype(float)

  # test "y ~ x1 + x2":
  #   let output = glm(addConstant(X1), y1, Gamma()).statsSummary.statsTable


  # test " y ~ 1 + x1 + x2 edge-case 1":
  #   let output = glm(addConstant(X2), y2, Gamma()).statsSummary.statsTable
